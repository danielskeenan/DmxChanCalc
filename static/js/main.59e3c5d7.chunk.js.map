{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","chanA","setChanA","chanB","setChanB","Navbar","variant","bg","Brand","Container","as","Form","Group","Row","Label","column","sm","htmlFor","Col","InputGroup","className","Prepend","Text","Control","type","name","value","min","max","onChange","e","handleChange","target","Math","round","handlePercentChange","Append","parseInt","newVal","setter","intVal","isNaN","floor","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59e3c5d7.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from 'react';\nimport {Col, Container, Form, InputGroup, Navbar, Row} from \"react-bootstrap\";\nimport './style.scss';\n\nexport default function App() {\n    const [chanA, setChanA] = useState(0);\n    const [chanB, setChanB] = useState(0);\n\n    return (\n        <>\n            <Navbar variant=\"dark\" bg=\"dark\">\n                <Navbar.Brand>DMX Channel Calculator</Navbar.Brand>\n            </Navbar>\n            <Container as={\"main\"}>\n                <Form>\n                    <Form.Group as={Row}>\n                        <Form.Label column sm={1} htmlFor=\"chan-a\">Chan A</Form.Label>\n                        <Col>\n                            <InputGroup className=\"mb-2\">\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text>DMX</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <Form.Control type=\"number\"\n                                              name=\"chan-a\"\n                                              value={chanA}\n                                              min=\"0\"\n                                              max=\"255\"\n                                              onChange={(e: ChangeEvent<HTMLInputElement>) => handleChange(e.target.value, 255, setChanA)}\n                                />\n                            </InputGroup>\n                        </Col>\n                        <Col>\n                            <InputGroup className=\"mb-2\">\n                                <Form.Control type=\"number\"\n                                              name=\"chan-a-pct\"\n                                              value={Math.round(chanA / 255 * 100)}\n                                              min=\"0\"\n                                              max=\"100\"\n                                              onChange={(e: ChangeEvent<HTMLInputElement>) => handlePercentChange(e.target.value, 255, setChanA)}\n                                />\n                                <InputGroup.Append>\n                                    <InputGroup.Text>%</InputGroup.Text>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </Col>\n                    </Form.Group>\n                    <Form.Group as={Row}>\n                        <Form.Label column sm={1} htmlFor=\"chan-b\">Chan B</Form.Label>\n                        <Col>\n                            <InputGroup className=\"mb-2\">\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text>DMX</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <Form.Control type=\"number\"\n                                              name=\"chan-b\"\n                                              value={chanB}\n                                              min=\"0\"\n                                              max=\"255\"\n                                              onChange={(e: ChangeEvent<HTMLInputElement>) => handleChange(e.target.value, 255, setChanB)}\n                                />\n                            </InputGroup>\n                        </Col>\n                        <Col>\n                            <InputGroup className=\"mb-2\">\n                                <Form.Control type=\"number\"\n                                              name=\"chan-b-pct\"\n                                              value={Math.round(chanB / 255 * 100)}\n                                              min=\"0\"\n                                              max=\"100\"\n                                              onChange={(e: ChangeEvent<HTMLInputElement>) => handlePercentChange(e.target.value, 255, setChanB)}\n                                />\n                                <InputGroup.Append>\n                                    <InputGroup.Text>%</InputGroup.Text>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </Col>\n                    </Form.Group>\n                    <hr/>\n                    <Form.Group as={Row}>\n                        <Form.Label column sm={1} htmlFor=\"absolute\">16-Bit</Form.Label>\n                        <Col>\n                            <InputGroup className=\"mb-2\">\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text>DMX</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <Form.Control type=\"number\"\n                                              name=\"value\"\n                                              value={(chanA << 8) + chanB}\n                                              min=\"0\"\n                                              max=\"65535\"\n                                              onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                                  const val = parseInt(e.target.value);\n                                                  handleChange(val, 65535, (newVal => {\n                                                      setChanA((newVal & 0xFF00) >> 8);\n                                                      setChanB(newVal & 0xFF);\n                                                  }));\n                                              }}\n                                />\n                            </InputGroup>\n                        </Col>\n                        <Col>\n                            <InputGroup className=\"mb-2\">\n                                <Form.Control type=\"number\"\n                                              name=\"value-pct\"\n                                              value={Math.round(((chanA << 8) + chanB) / 65535 * 100)}\n                                              min=\"0\"\n                                              max=\"100\"\n                                              onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                                  const val = parseInt(e.target.value);\n                                                  handlePercentChange(val, 65535, (newVal => {\n                                                      setChanA((newVal & 0xFF00) >> 8);\n                                                      setChanB(newVal & 0xFF);\n                                                  }));\n                                              }}\n                                />\n                                <InputGroup.Append>\n                                    <InputGroup.Text>%</InputGroup.Text>\n                                </InputGroup.Append>\n                            </InputGroup>\n                        </Col>\n                    </Form.Group>\n                </Form>\n            </Container>\n        </>\n    );\n}\n\nfunction handlePercentChange(value: string | number, max: number, setter: (newVal: number) => void) {\n    let intVal = value;\n    if (typeof intVal !== 'number') {\n        intVal = parseInt(intVal);\n    }\n\n    // Validate\n    if (isNaN(intVal) || intVal < 0 || intVal > max) {\n        return;\n    }\n\n    handleChange(Math.floor(intVal / 100 * max), max, setter);\n}\n\nfunction handleChange(value: string | number, max: number, setter: (newVal: number) => void) {\n    let intVal = value;\n    if (typeof intVal !== 'number') {\n        intVal = parseInt(intVal);\n    }\n\n    // Validate\n    if (isNaN(intVal) || intVal < 0 || intVal > max) {\n        return;\n    }\n    setter(intVal);\n}\n","import React from 'react';\nimport { render } from 'react-snapshot';\nimport App from './App';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}